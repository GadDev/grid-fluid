{"version":3,"sources":["App.js","index.js"],"names":["Story","story","useState","isExpand","setIsExpand","id","gridColumnStart","gridRowStart","url","title","styleExpand","gridColumnEnd","gridRowEnd","onClick","console","log","key","className","style","href","HackerStoryTiles","stories","length","map","defaultProps","App","setStories","useEffect","a","fetch","response","ok","Error","text","json","promises","then","Promise","all","result","counter","reducer","reduce","acc","push","error","getTopStories","ReactDOM","render","document","getElementById"],"mappings":"kPAMA,SAASA,EAAT,GAA2B,IAAVC,EAAS,EAATA,MAAS,EACUC,oBAAS,GADnB,mBACfC,EADe,KACLC,EADK,KAEdC,EAAkDJ,EAAlDI,GAAIC,EAA8CL,EAA9CK,gBAAiBC,EAA6BN,EAA7BM,aAAcC,EAAeP,EAAfO,IAAKC,EAAUR,EAAVQ,MAE1CC,EAAc,CAChBJ,gBAAgB,GAAD,OAAKA,GACpBK,cAAc,GAAD,OAAKL,EAAkB,GACpCC,aAAa,GAAD,OAAKA,GACjBK,WAAW,GAAD,OAAKL,EAAe,IAOlC,OACI,wBAAIM,QANR,WACIC,QAAQC,IAAI,SACZX,GAAaD,IAIYa,IAAKX,EAAIY,UAAS,uBAAkBX,EAAlB,sBAA+CC,GAAgBW,MAAOf,EAAWO,EAAc,IACtI,uBAAGS,KAAMX,GAAMC,IAK3B,SAASW,EAAT,GAAwC,IAAZC,EAAW,EAAXA,QACxB,OAAuB,IAAnBA,EAAQC,OACD,mDAIP,yBAAKL,UAAU,uBACX,0DACA,4BACKI,EAAQE,KAAI,SAAAtB,GAET,OACI,kBAACD,EAAD,CAAOgB,IAAKf,EAAMI,GAAIJ,MAAOA,SAwErDmB,EAAiBI,aAAe,CAC5BH,QAAU,CAAC,KAaAI,MA3Ef,WAAgB,IAAD,EAEmBvB,mBAAS,IAF5B,mBAEJmB,EAFI,KAEKK,EAFL,KA2CX,OAvCAC,qBAAU,WAAM,4CACZ,wCAAAC,EAAA,4DACc,qEADd,kBAG2BC,MAFb,sEADd,WAIwB,KADdC,EAHV,QAIiBC,GAJjB,sBAKY,IAAIC,MAAM,kBAAoBF,EAASG,MALnD,uBAOuBH,EAASI,OAPhC,cAOUA,EAPV,OAQUC,EAAWD,EACdX,KAAI,SAAAlB,GAAE,OACLwB,MAAM,8CAAD,OAA+CxB,EAA/C,uBAAuE+B,MAC1E,SAAAN,GAAQ,OAAIA,EAASI,aAX/B,UAcyBG,QAAQC,IAAIH,GAdrC,QAcUI,EAdV,OAeQhC,EAAe,EACfiC,EAAU,EACRC,EAAUF,EAAOG,QAAO,SAACC,EAAI1C,GAU/B,OAPgB,KADhBuC,GAAW,KAEPjC,IACAiC,EAAU,GAEdvC,EAAMM,aAAeA,EACrBN,EAAMK,gBAAkBkC,EACxBG,EAAIC,KAAK3C,GACF0C,IACR,IACH7B,QAAQC,IAAI0B,GACZf,EAAWe,GA9Bf,kDAgCI3B,QAAQ+B,MAAR,MAhCJ,2DADY,uBAAC,WAAD,wBAoCZC,KACC,IAGD,yBAAK7B,UAAU,OACX,4BAAQA,UAAU,cACd,kDAIJ,8BACI,kBAACG,EAAD,CAAkBC,QAASA,OCjG3C0B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.a744011d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\n\n\nfunction Story({ story }) {\n    const [isExpand, setIsExpand] = useState(false);\n    const { id, gridColumnStart, gridRowStart, url, title } = story;\n\n    const styleExpand = {\n        gridColumnStart: `${gridColumnStart}`,\n        gridColumnEnd: `${gridColumnStart + 2}`,\n        gridRowStart: `${gridRowStart}`,\n        gridRowEnd: `${gridRowStart + 2}`\n    }\n    function expandCell(){\n        console.log('click')\n        setIsExpand(!isExpand);\n    }\n\n    return (\n        <li onClick={expandCell} key={id} className={`column-start-${gridColumnStart} row-start-${gridRowStart}`} style={isExpand ? styleExpand : {}}>\n            <a href={url}>{title}</a>\n        </li>\n    );\n}\n\nfunction HackerStoryTiles({ stories }) {\n    if (stories.length === 0) {\n        return <div>Loading stories...</div>;\n    }\n\n    return (\n        <div className=\"story-list__wrapper\">\n            <h1>HackerNews Top 500 stories</h1>\n            <ul>\n                {stories.map(story => {\n\n                    return (\n                        <Story key={story.id} story={story} />\n                    )\n                    \n                })}\n            </ul>\n        </div>\n    );\n}\n\n\n\nfunction App() {\n\n    const [stories, setStories] = useState([]);\n\n    useEffect(() => {\n        async function getTopStories() {\n          const url = \"https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty\";\n          try {\n            const response = await fetch(url);\n            if (response.ok === false) {\n              throw new Error(\"Response Error:\" + response.text);\n            }\n            const json = await response.json();\n            const promises = json\n              .map(id =>\n                fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json?print=pretty`).then(\n                  response => response.json()\n                )\n              );\n            const result = await Promise.all(promises);\n            let gridRowStart = 1;\n            let counter = 0;\n            const reducer = result.reduce((acc,story) => {\n                \n                counter += 1;\n                if (counter === 9) {\n                    gridRowStart++;\n                    counter = 1;\n                } \n                story.gridRowStart = gridRowStart;\n                story.gridColumnStart = counter;\n                acc.push(story)\n                return acc;\n            }, []);\n            console.log(reducer)\n            setStories(reducer);\n          } catch (err) {\n            console.error(err);\n          }\n        }\n        getTopStories();\n      }, []);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div>\n                    Hacker News feed\n                </div>\n            </header>\n            <main>\n                <HackerStoryTiles stories={stories} />\n            </main>\n        </div>\n    );\n}\n\nHackerStoryTiles.propTypes = {\n    stories: PropTypes.arrayOf(PropTypes.shape({}))\n}\n\nHackerStoryTiles.defaultProps = {\n    stories : [{}]\n}\n\nStory.propTypes = {\n    story: PropTypes.shape({\n        id: PropTypes.number,\n        gridColumnStart: PropTypes.number,\n        gridRowStart: PropTypes.number,\n        url: PropTypes.string,\n        title: PropTypes.string\n    }).isRequired\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}